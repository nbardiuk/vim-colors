<%
    # RNB, A VIM COLORSCHEME TEMPLATE
    # Author:        Romain Lafourcade (https://github.com/romainl)
    # Canonical URL: https://github.com/romainl/vim-rnb

    # This template is designed to help vimmers create their own colorschemes
    # without much effort.
    #
    # You will need Ruby to generate your colorscheme but Ruby knowledge is
    # not needed at all.
    #
    # The process is divided in five steps:
    #   1. rename the template,
    #   2. edit your colorscheme's information,
    #   3. define your colors,
    #   4. define your highlight groups and links,
    #   5. and generate your colorscheme.

    # Step 1: renaming
    #
    # If this file is distributed with a colorscheme it's probably already named correctly
    # and you can skip this step.
    #
    # If you forked/cloned/copied this repository to create your own colorscheme, you will have to
    # rename this template to match the name of your colorscheme.
    #
    # NOTE: Vim doesn't really care about whitespace in the name of the colorscheme but it does for
    # filenames so make sure your filename doesn't have any whitespace character.
    #
    #   colorscheme name | template filename | colorscheme filename
    #  ------------------|-------------------|----------------------
    #   foobar           | foobar.erb        | foobar.vim
    #   foo-bar          | foo-bar.erb       | foo-bar.vim
    #   foo_bar          | foo_bar.erb       | foo_bar.vim
    #   foo bar          | foo-bar.erb or    | foo-bar.vim or
    #                    | foo_bar.erb       | foo_bar.vim

    # Step 2: information
    #
    # Make sure the name of your colorscheme is unique and attractive.
    # The description should fit in a single line with no linefeed.
    information = {
        author:      "Nazarii Bardiuk",
        email:       "nazarii@bardiuk.com",
        name:        "mycolors",
    }

    # Step 3: colors
    #
    # black = [       give each color a distinctive name
    #   "#000000",    hexadecimal color used in GVim/MacVim or "NONE"
    #   0,            integer between 0 and 255 used by terminals supporting 256 colors
    #                 or "NONE"
    #   "black"       color name used by less capable color terminals, can be "darkred",
    #                 "red", "darkgreen", "green", "darkyellow", "yellow", "darkblue",
    #                 "blue", "darkmagenta", "magenta", "black", "darkgrey", "grey",
    #                 "white", or "NONE"
    # ]
    #
    # If your colors are defined correctly, the resulting colorscheme is guaranteed
    # to work in GVim (Windows/Linux), MacVim (MacOS), and any properly set up terminal emulator.
    base0          = ["#24292e", 235, "NONE"] # github text fg
    base1          = ["#41484f", 238, "NONE"] # lightened from 0
    base2          = ["#6a737d", 243, "NONE"] # github comment
    base3          = ["#76787b", 243, "NONE"]
    base4          = ["#babbbc", 250, "NONE"]
    red            = ["#d73a49", 167, "NONE"] # github syntax
    darkred        = ["#b31d28", 124, "NONE"] # github syntax
    purple         = ["#6f42c1", 91 , "NONE"] # github syntax
    darkpurple     = ["#45267d", 237, "NONE"]
    yellow         = ["#ffffc5", 230, "NONE"] # github search
    green          = ["#22863a", 29 , "NONE"] # github syntax (html)
    boldgreen      = ["#3ebc5c", 29 , "NONE"]
    orange         = ["#e36209", 166, "NONE"] # github syntax
    boldorange     = ["#f18338", 166, "NONE"]
    lightgreen     = ["#e6ffed", 85 , "NONE"] # github diff
    lightred       = ["#ffeef0", 167, "NONE"] # github diff
    lightorange_nr = ["#fff5b1", 229, "NONE"] # github selected line number column
    lightorange    = ["#fffbdd", 230, "NONE"] # github selected line
    difftext       = ["#f2e496", 222, "NONE"]
    darkblue       = ["#032f62", 17 , "NONE"]
    blue           = ["#005cc5", 26 , "NONE"] # github syntax
    blue0          = ["#669cc2", 153, "NONE"]
    blue3          = ["#bde0fb", 153, "NONE"]
    visualblue     = ["#e4effb", 153, "NONE"]
    lightblue      = ["#f1f8ff", 153, "NONE"]
    grey0          = ["#dde2e7", 254, "NONE"]
    grey1          = ["#eceef1", 255, "NONE"]
    grey2          = ["#f6f8fa", 255, "NONE"] # github inline code block bg
    gutter         = ["#fafbfc", 255, "NONE"] # github generic light
    bg             = ["#ffffff", 231, "NONE"]

    # Step 4: highlights
    #
    # You can define highlight groups like this:
    #
    #   [ "Normal",       name of the highlight group
    #     white,          the color used for background color, or use "NONE", "fg" or "bg"
    #     darkgray,       the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "NONE"          style, can be "bold", "underline", "reverse", "italic",
    #                     "standout", "NONE" or "undercurl"
    #   ]
    #
    # The sample above tells Vim to render normal text in dark gray against a white
    # background, without any other styling.
    #
    # Or you can link an highlight group to another. Here, "Title" will inherit its style from
    # "Normal":
    #
    #   [ "Title", "Normal" ]
    #
    # In GUI Vim, there is an additional color for the undercurl used to
    # highlight spelling mistakes:
    #
    #   [ "SpellBad",     name of the highlight group
    #     "NONE",         the color used for background color, or use "NONE", "fg" or "bg"
    #     red,            the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "undercurl",    style
    #     red             color used for the undercurl
    #   ]
    #
    # The sample above tells Vim to render badly spelled words in red against the current
    # background, with a red undercurl.
    #
    # You can add any custom highlight group to the standard list below but you shouldn't
    # remove any if you want a working colorscheme. Most of them are described under
    # :help highlight-default, the others are taken from :help group-name. Both help sections
    # are good reads, by the way.
    highlights = [
        [ "Normal", bg, base0, "NONE" ],
        [ "Cursor", base0, bg, "NONE" ],
        [ "CursorIM", "Cursor" ],
        [ "Visual", visualblue, "NONE", "NONE" ],
        [ "VisualNOS", lightblue, "NONE", "NONE" ],
        [ "Search", yellow, "NONE", "bold" ],
        [ "IncSearch", "Search" ],
        [ "NonText", bg, base4, "NONE" ], # listchars eol
        [ "Whitespace", "NonText" ],      # listchars spaces, tab, ...
        [ "SpecialKey", bg, base4, "NONE" ],
        [ "Conceal", "NONE", red, "NONE" ],

        [ "MatchParen", blue3, darkblue, "NONE" ],
        [ "WarningMsg", "NONE", orange, "NONE"  ],
        [ "ErrorMsg", "NONE", darkred, "NONE" ],
        [ "Error", gutter, darkred, "NONE" ],
        [ "Title", "NONE", base1, "bold" ],

        [ "VertSplit", grey1, grey1, "NONE" ],
        [ "LineNr", gutter, base4, "NONE" ],
        [ "SignColumn", gutter, base4, "NONE" ],
        [ "EndOfBuffer", gutter, base4, "NONE" ],
        [ "ColorColumn", grey2, "NONE", "NONE" ],
        [ "CursorLineNr", lightorange_nr, base3, "NONE" ],
        [ "CursorLine", lightorange, "NONE", "NONE" ],
        [ "CursorColumn", "CursorLine" ],
        [ "QuickFixLine", blue3, "NONE", "bold" ],
        [ "qfLineNr", gutter, base3, "NONE" ],

        [ "Folded", lightblue, base3, "NONE" ],
        [ "FoldColumn", gutter, blue0, "NONE" ],

        [ "StatusLine", base0, grey2, "NONE" ],
        [ "StatusLineNC", grey1, base3, "NONE" ],
        [ "StatusLineTerm", "StatusLine" ],
        [ "StatusLineTermNC", "StatusLineNC" ],
        [ "WildMenu", blue, grey2, "NONE" ],

        [ "Pmenu", grey2, base3, "NONE" ],
        [ "PmenuSbar", blue, grey2, "bold" ],
        [ "PmenuSel", grey2, "NONE", "NONE" ],
        [ "PmenuThumb", grey0, "NONE", "NONE" ],

        [ "Question", "NONE", green, "NONE" ], # hit enter to continue

        [ "TabLine", grey1, base1, "NONE" ],
        [ "TabLineFill", grey0, grey0, "NONE" ],
        [ "TabLineSel", "NONE", base1, "bold" ],

        [ "DiffAdd", lightgreen, "NONE", "NONE" ],
        [ "DiffDelete", lightred, base4, "NONE" ],
        [ "DiffChange", lightorange, "NONE", "NONE" ],
        [ "DiffText", difftext, "NONE", "NONE" ],

        [ "DiffFile", grey2, base0, "NONE" ],
        [ "DiffNewFile", grey2, base0, "NONE" ],
        [ "DiffIndexLine", grey2, darkblue, "NONE" ],
        [ "DiffLine", lightblue, base2, "NONE" ],
        [ "DiffSubname", lightblue, darkblue, "NONE" ],
        [ "DiffAdded", lightgreen, green, "NONE" ],
        [ "DiffRemoved", lightred, red, "NONE" ],

        [ "GitGutterAdd", gutter, green, "NONE" ],
        [ "GitGutterChange", gutter, orange, "NONE" ],
        [ "GitGutterDelete", gutter, darkred, "NONE" ],
        [ "GitGutterChangeDelete", gutter, orange, "NONE" ],

        [ "SpellBad", bg, red, "undercurl", red ],
        [ "SpellCap", bg, green, "undercurl", green ],
        [ "SpellLocal", bg, purple, "undercurl", yellow ],
        [ "SpellRare", bg, purple, "undercurl", purple ],

        [ "String", bg, base1, "bold" ],
        [ "Number", bg, base1, "bold" ],
        [ "Constant", bg, base1, "bold" ],
        [ "clojureKeyword", "Constant" ],
        [ "Comment", bg, base2, "NONE" ],
        [ "Ignore", bg, base4, "NONE" ],
        [ "Underlined", bg, base0, "underline" ],
        [ "Identifier", bg, base0, "NONE" ],
        [ "PreProc", bg, base0, "NONE" ],
        [ "Special", bg, base0, "NONE" ],
        [ "Statement", bg, base0, "NONE" ],
        [ "Todo", bg, base0, "NONE" ],
        [ "Type", bg, base0, "NONE" ],

        [ "helpLeadBlank", bg, base0, "NONE" ],
        [ "helpNormal", bg, base0, "NONE" ],
        [ "Directory", bg, base0, "NONE" ],
        [ "ModeMsg", bg, base0, "NONE" ],
        [ "MoreMsg", bg, base0, "NONE" ],
        [ "Terminal", "Normal" ],
        [ "ToolbarLine", bg, base0, "NONE" ],
        [ "ToolbarButton", bg, base0, "NONE" ],
        [ "debugPC", bg, base0, "NONE" ],
        [ "debugBreakpoint", bg, base0, "NONE" ],
    ]

    # Define the color palette used by :terminal when in GUI Vim
    # or in TUI Vim when 'termguicolors' is enabled. If this list
    # is empty or if it doesn't contain exactly 16 items, the corresponding
    # Vim variable won't be set.
    #
    # The expected values are colors defined in step 3.
    #
    # Terminal emulators use a basic palette of 16 colors that can be
    # addressed by CLI and TUI tools via their name or their index, from
    # 0 to 15. The list is not really standardized but it is generally
    # assumed to look like this:
    #
    #   Index | Name
    #  -------|-------------
    #   0     | black
    #   1     | darkred
    #   2     | darkgreen
    #   3     | darkyellow
    #   4     | darkblue
    #   5     | darkmagenta
    #   6     | darkcyan
    #   7     | gray
    #   8     | darkgray
    #   9     | red
    #   10    | green
    #   11    | yellow
    #   12    | blue
    #   13    | magenta
    #   14    | cyan
    #   15    | white
    #
    # While you are certainly free to make colors 0 to 7 shades of blue,
    # this will inevitably cause usability issues so… be careful.
    terminal_ansi_colors = [
        base4,       # 0
        red,         # 1
        boldgreen,   # 2
        boldorange,  # 3
        blue,        # 4
        purple,      # 5
        blue,        # 6
        base1,       # 7
        base3,       # 8
        darkred,     # 9
        green,       # 10
        orange,      # 11
        darkblue,    # 12
        darkpurple,  # 13
        darkblue,    # 14
        base0,       # 15
    ]

    # Step 5: generation
    #
    # From a separate shell:
    #
    #     $ erb -T - bar.erb > bar.vim
    #
    # From Vim:
    #
    #     :!erb -T - % > %<.vim
    #
    # If this template comes with a Makefile, you can do it from a separate shell,
    # with the make program:
    #
    #     $ make

    # These online resources can help you design your colorscheme:
    #
    #   * http://upload.wikimedia.org/wikipedia/en/1/15/Xterm_256color_chart.svg
    #         the xterm palette
    #   * http://whatcolor.herokuapp.com/
    #         play with hexadecimal colors right in the address bar (currently down)
    #   * http://color.hailpixel.com/
    #         similar concept, fuzzier implementation
    #   * http://colourco.de/
    #         similar concept, fancier implementation
    #   * http://www.colr.org/
    #         extract a palette from an image
    #   * http://colores.manugarri.com/
    #         search for 'word', get images and color palettes
    #   * http://www.colourlovers.com/palettes
    #         user-created palettes
    #   * http://www.perbang.dk/color+scheme/
    #         a no-nonsense colorscheme generator
    #   * https://color.adobe.com/
    #         Adobe's fancy colorscheme generator
    #   * http://paletton.com/
    #         The classic 'Color Scheme Designer', rebranded
    #   * http://vrl.cs.brown.edu/color
    #         A very smart palette generator
    #   * https://cmcenroe.me/2018/04/03/colour-scheme.html
    #         "I Made My Own Colour Scheme and You Can Too!"

    # A few general advices:
    #
    #   * The Windows console is limited to the 16 so-called "ANSI" colors but it used to
    #     have a few of them interverted which makes numbers impractical. Use color names
    #     instead of numbers: :help cterm-colors
    #   * The Windows console (yeah…) doesn't do italics, underlines or bolded text;
    #     it is limited to normal and reverse. Keep that in mind if you want
    #     your colorscheme to be usable in as many environments as possible by as many
    #     people as possible.
    #   * Actually, terminal emulators rarely do italics.
    #   * All of the terminal emulators in use these days allow their users to
    #     change the 16 so-called "ANSI" colors. It is also possible on some platforms
    #     to change some or all of the 256 colors in the xterm palette. Don't take
    #     anything for granted.
    #   * When used against a light background, strong colors work better than muted
    #     ones. Light or dark doesn't really matters. Also, it is harder to discriminate
    #     between two similar colors on a light background.
    #   * Both strong and muted colors work well against a dark background. It is also
    #     easier to work with similar colors, but dark colors don't work at all.
    #   * Use as many text samples as possible. String-heavy languages may look completely
    #     different than keyword-heavy ones. This can have an impact on the usability
    #     of your colorscheme.
    #   * Most terminal emulators and terminal multiplexers currently in use on unix-like
    #     systems support 256 colors but they almost always default to a '$TERM' that tells
    #     Vim otherwise. Your users will need to make sure their terminal emulator/multiplexer
    #     is correctly set up if they want to enjoy the best possible experience.

    # Many thanks to Barry Arthur (https://github.com/dahu) for the original idea.

    # You don't need to edit anything beyond this line.
-%>
" <%= information[:name] %>.vim -- Vim color scheme.
" Author:      <%= information[:author] %> (<%= information[:email] %>)
" Last Change: <%= Time.new.strftime "%Y-%m-%d" %>

hi clear

if exists('syntax_on')
  syntax reset
endif

let colors_name = '<%= information[:name].downcase %>'

if ($TERM =~# '256' || &t_Co >= 256) || has('gui_running')
<% for highlight in highlights -%>
<% if highlight.length == 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %>
<% elsif highlight.length > 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %> guisp=<%= highlight[4].kind_of?(String) ? highlight[4] : highlight[4][0] %>
<% end -%>
<% end -%>

elseif &t_Co == 8 || $TERM !~# '^linux' || &t_Co == 16
    set t_Co=16
<%= '' %>
<% for highlight in highlights -%>
<% if highlight.length > 2 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][2] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][2] %> cterm=<%= highlight[3] %>
<% end -%>
<% end -%>
endif
<% links = highlights.select do |highlight| -%>
<% highlight.length == 2 -%>
<% end -%>
<% if links.length > 0 -%>
<%= '' %>
<% for link in links -%>
hi link <%= link[0] %> <%= link[1] %>
<% end -%>
<% end -%>
<% if terminal_ansi_colors.length == 16 -%>
<%= '' %>
let g:terminal_ansi_colors = [
<% for color in terminal_ansi_colors -%>
        \ '<%= color[0] %>',
<% end -%>
        \ ]

<% for color,index in terminal_ansi_colors.each_with_index -%>
let g:terminal_color_<%= index %> = '<%= color[0] %>'
<% end -%>
<% end -%>

" Generated with RNB (https://github.com/romainl/vim-rnb)
